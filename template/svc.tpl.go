// Code generated by hero.
// source: /Users/kingphang/Workspaces/uau/ebot/template/svc.tpl
// DO NOT EDIT!
package template

import (
	"bytes"
	"github.com/uauteam/ebot/project"

	"github.com/shiyanhui/hero"
)

func GenerateServiceFile(m *project.Metadata, buffer *bytes.Buffer) {
	buffer.WriteString(`
package svc

import (
    "github.com/jinzhu/copier"
    "`)
	hero.EscapeHTML(m.RepoHost, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoUser, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoName, buffer)
	buffer.WriteString(`/api/query"
	"`)
	hero.EscapeHTML(m.RepoHost, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoUser, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoName, buffer)
	buffer.WriteString(`/api/req"
    "`)
	hero.EscapeHTML(m.RepoHost, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoUser, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoName, buffer)
	buffer.WriteString(`/api/resp"
	"`)
	hero.EscapeHTML(m.RepoHost, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoUser, buffer)
	buffer.WriteString(`/`)
	hero.EscapeHTML(m.RepoName, buffer)
	buffer.WriteString(`/entity"
	"github.com/uauteam/ecot/dto/rsp"
	"github.com/uauteam/ecot/repo"
)

func Create`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Req *req.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Req)(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Resp resp.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Resp, err error) {
	`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(` := new(entity.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`)
    if err = copier.Copy(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Req); err != nil {
        return
    }

    err = repo.Create(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`)
    if err != nil {
        return
    }

    if err = copier.Copy(&`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Resp, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`); err != nil {
        return
    }

    return
}

func Get`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`(id uint)(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Resp resp.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Resp, err error) {
	`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(` := new(entity.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`)
    err = repo.Get(id, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`)
    if err != nil {
        return
    }

    if err = copier.Copy(&`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Resp, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`); err != nil {
        return
    }

	return
}

func Find`)
	hero.EscapeHTML(m.ModuleTitleNamePlural, buffer)
	buffer.WriteString(`(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query *query.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Query)(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`ListResp rsp.PageResponse, err error) {
	`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(` := new(entity.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`)
    if err = copier.Copy(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query); err != nil {
        return
    }

    var `)
	hero.EscapeHTML(m.ModuleNamePlural, buffer)
	buffer.WriteString(` []entity.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`
    var total uint
    if `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query.Size > 0 || `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query.Page > 0 {
        total, err = repo.FindPage(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query.PageQuery, &`)
	hero.EscapeHTML(m.ModuleNamePlural, buffer)
	buffer.WriteString(`)
        `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`ListResp.Page = &(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query.Page)
        `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`ListResp.Size = &(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Query.Size)
        `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`ListResp.Total = &total
    } else {
        err = repo.Find(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`, &`)
	hero.EscapeHTML(m.ModuleNamePlural, buffer)
	buffer.WriteString(`)
    }
    if err != nil {
        return
    }

    var `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`RespList []resp.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Resp
    if err = copier.Copy(&`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`RespList, &`)
	hero.EscapeHTML(m.ModuleNamePlural, buffer)
	buffer.WriteString(`); err != nil {
        return
    }
    `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`ListResp.Elements = `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`RespList

	return
}

func Update`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`(id uint, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Req *req.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Req)(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Resp resp.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`Resp, err error) {
	`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(` := new(entity.`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`)
    if err = copier.Copy(`)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`Req); err != nil {
        return
    }

    err = repo.Update(id, `)
	hero.EscapeHTML(m.ModuleName, buffer)
	buffer.WriteString(`)

    if err != nil {
        return
    }

    return Get`)
	hero.EscapeHTML(m.ModuleTitleName, buffer)
	buffer.WriteString(`(id)
}`)

}
